package com.tenio.engine.physic2d.graphic.window;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.awt.Point;
import org.junit.jupiter.api.Test;

class WindowsTest {
  @Test
  void testD2PointSetLocation() {
    Windows.D2Point d2Point = new Windows.D2Point();
    d2Point.setLocation(10.0f, 10.0f);
    assertEquals(10.0f, d2Point.y);
    assertEquals(10.0f, d2Point.x);
  }

  @Test
  void testLoadIcon() {
    // TODO: This test is incomplete.
    //   Reason: R004 No meaningful assertions found.
    //   Diffblue Cover was unable to create an assertion.
    //   Make sure that fields modified by loadIcon(String)
    //   have package-private, protected, or public getters.
    //   See https://diff.blue/R004 to resolve this issue.

    Windows.loadIcon("");
  }

  @Test
  void testP2PointConstructor() {
    Windows.P2Point actualP2Point = new Windows.P2Point();
    assertEquals(0, actualP2Point.y);
    assertEquals(0.0, actualP2Point.getX());
    assertEquals("com.tenio.engine.physic2d.graphic.window.Windows$P2Point[x=0,y=0]",
        actualP2Point.toString());
    assertEquals(0, actualP2Point.x);
    assertEquals(0.0, actualP2Point.getY());
    Point location = actualP2Point.getLocation();
    assertEquals(0.0, location.getX());
    Point location1 = location.getLocation();
    assertEquals(location, location1);
    assertEquals(0, location.x);
    assertEquals("java.awt.Point[x=0,y=0]", location.toString());
    assertEquals(0, location.y);
    assertEquals(0.0, location.getY());
    assertEquals(0.0, location1.getY());
    assertEquals(0.0, location1.getX());
    Point location2 = location1.getLocation();
    assertEquals(location, location2);
    assertEquals(location1, location2);
    assertEquals(0, location1.y);
    assertEquals(0, location1.x);
    assertEquals("java.awt.Point[x=0,y=0]", location1.toString());
    assertEquals("java.awt.Point[x=0,y=0]", location2.toString());
    assertEquals(0.0, location2.getY());
    assertEquals(0.0, location2.getX());
    Point location3 = location2.getLocation();
    assertEquals(location, location3);
    assertEquals(location1, location3);
    assertEquals(location2, location3);
    assertEquals(0, location2.x);
    assertEquals(0, location2.y);
    assertEquals(0, location3.x);
    assertEquals("java.awt.Point[x=0,y=0]", location3.toString());
    assertEquals(0.0, location3.getY());
    assertEquals(0.0, location3.getX());
    Point location4 = location3.getLocation();
    assertEquals(location, location4);
    assertEquals(location1, location4);
    assertEquals(location2, location4);
    assertEquals(location3, location4);
    assertEquals(0, location3.y);
    assertEquals(0, location4.y);
    assertEquals(0, location4.x);
    assertEquals("java.awt.Point[x=0,y=0]", location4.toString());
    assertEquals(0.0, location4.getY());
    assertEquals(0.0, location4.getX());
    Point location5 = location4.getLocation();
    assertEquals(location, location5);
    assertEquals(location1, location5);
    assertEquals(location2, location5);
    assertEquals(location3, location5);
    assertEquals(location4, location5);
    Point location6 = location5.getLocation();
    assertEquals(location, location6);
    assertEquals(location1, location6);
    assertEquals(location2, location6);
    assertEquals(location3, location6);
    assertEquals(location4, location6);
    assertEquals(location5, location6);
    assertEquals(0, location5.y);
    assertEquals(0.0, location5.getX());
    assertEquals("java.awt.Point[x=0,y=0]", location5.toString());
    assertEquals(0, location5.x);
    assertEquals(0.0, location5.getY());
    assertEquals(0.0, location6.getX());
    Point location7 = location6.getLocation();
    assertEquals(location, location7);
    assertEquals(location1, location7);
    assertEquals(location2, location7);
    assertEquals(location3, location7);
    assertEquals(location4, location7);
    assertEquals(location5, location7);
    assertEquals(location6, location7);
    assertEquals(0, location6.x);
    assertEquals("java.awt.Point[x=0,y=0]", location6.toString());
    assertEquals(0, location6.y);
    assertEquals(0.0, location6.getY());
    assertEquals(0.0, location7.getY());
    assertEquals(0.0, location7.getX());
    Point location8 = location7.getLocation();
    assertEquals(location, location8);
    assertEquals(location1, location8);
    assertEquals(location2, location8);
    assertEquals(location3, location8);
    assertEquals(location4, location8);
    assertEquals(location5, location8);
    assertEquals(location6, location8);
    assertEquals(location7, location8);
    assertEquals(0, location7.y);
    assertEquals(0, location7.x);
    assertEquals("java.awt.Point[x=0,y=0]", location7.toString());
    assertEquals(0, location8.x);
    assertEquals(0, location8.y);
  }

  @Test
  void testP2PointConstructor2() {
    Windows.P2Point actualP2Point = new Windows.P2Point(2, 3);

    assertEquals(3, actualP2Point.y);
    assertEquals(2.0, actualP2Point.getX());
    assertEquals("com.tenio.engine.physic2d.graphic.window.Windows$P2Point[x=2,y=3]",
        actualP2Point.toString());
    assertEquals(2, actualP2Point.x);
    assertEquals(3.0, actualP2Point.getY());
    Point location = actualP2Point.getLocation();
    assertEquals(2.0, location.getX());
    Point location1 = location.getLocation();
    assertEquals(location, location1);
    assertEquals(2, location.x);
    assertEquals("java.awt.Point[x=2,y=3]", location.toString());
    assertEquals(3, location.y);
    assertEquals(3.0, location.getY());
    assertEquals(3.0, location1.getY());
    assertEquals(2.0, location1.getX());
    Point location2 = location1.getLocation();
    assertEquals(location, location2);
    assertEquals(location1, location2);
    assertEquals(3, location1.y);
    assertEquals(2, location1.x);
    assertEquals("java.awt.Point[x=2,y=3]", location1.toString());
    assertEquals("java.awt.Point[x=2,y=3]", location2.toString());
    assertEquals(3.0, location2.getY());
    assertEquals(2.0, location2.getX());
    Point location3 = location2.getLocation();
    assertEquals(location, location3);
    assertEquals(location1, location3);
    assertEquals(location2, location3);
    assertEquals(2, location2.x);
    assertEquals(3, location2.y);
    assertEquals(2, location3.x);
    assertEquals("java.awt.Point[x=2,y=3]", location3.toString());
    assertEquals(3.0, location3.getY());
    assertEquals(2.0, location3.getX());
    Point location4 = location3.getLocation();
    assertEquals(location, location4);
    assertEquals(location1, location4);
    assertEquals(location2, location4);
    assertEquals(location3, location4);
    assertEquals(3, location3.y);
    assertEquals(3, location4.y);
    assertEquals(2, location4.x);
    assertEquals("java.awt.Point[x=2,y=3]", location4.toString());
    assertEquals(3.0, location4.getY());
    assertEquals(2.0, location4.getX());
    Point location5 = location4.getLocation();
    assertEquals(location, location5);
    assertEquals(location1, location5);
    assertEquals(location2, location5);
    assertEquals(location3, location5);
    assertEquals(location4, location5);
    Point location6 = location5.getLocation();
    assertEquals(location, location6);
    assertEquals(location1, location6);
    assertEquals(location2, location6);
    assertEquals(location3, location6);
    assertEquals(location4, location6);
    assertEquals(location5, location6);
    assertEquals(3, location5.y);
    assertEquals(2.0, location5.getX());
    assertEquals("java.awt.Point[x=2,y=3]", location5.toString());
    assertEquals(2, location5.x);
    assertEquals(3.0, location5.getY());
    assertEquals(2.0, location6.getX());
    Point location7 = location6.getLocation();
    assertEquals(location, location7);
    assertEquals(location1, location7);
    assertEquals(location2, location7);
    assertEquals(location3, location7);
    assertEquals(location4, location7);
    assertEquals(location5, location7);
    assertEquals(location6, location7);
    assertEquals(2, location6.x);
    assertEquals("java.awt.Point[x=2,y=3]", location6.toString());
    assertEquals(3, location6.y);
    assertEquals(3.0, location6.getY());
    assertEquals(3.0, location7.getY());
    assertEquals(2.0, location7.getX());
    Point location8 = location7.getLocation();
    assertEquals(location, location8);
    assertEquals(location1, location8);
    assertEquals(location2, location8);
    assertEquals(location3, location8);
    assertEquals(location4, location8);
    assertEquals(location5, location8);
    assertEquals(location6, location8);
    assertEquals(location7, location8);
    assertEquals(3, location7.y);
    assertEquals(2, location7.x);
    assertEquals("java.awt.Point[x=2,y=3]", location7.toString());
    assertEquals(2, location8.x);
    assertEquals(3, location8.y);
  }

  @Test
  void testP2PointConstructor3() {
    Point point = new Point(2, 3);

    Windows.P2Point actualP2Point = new Windows.P2Point(point);
    Point location = actualP2Point.getLocation();
    assertEquals(point, location);
    assertEquals(3, actualP2Point.y);
    assertEquals(2.0, actualP2Point.getX());
    assertEquals("com.tenio.engine.physic2d.graphic.window.Windows$P2Point[x=2,y=3]",
        actualP2Point.toString());
    assertEquals(2, actualP2Point.x);
    assertEquals(3.0, actualP2Point.getY());
    assertEquals(2.0, location.getX());
    Point location1 = location.getLocation();
    assertEquals(point, location1);
    assertEquals(location, location1);
    assertEquals(2, location.x);
    assertEquals("java.awt.Point[x=2,y=3]", location.toString());
    assertEquals(3, location.y);
    assertEquals(3.0, location.getY());
    assertEquals(3.0, location1.getY());
    assertEquals(2.0, location1.getX());
    Point location2 = location1.getLocation();
    assertEquals(point, location2);
    assertEquals(location, location2);
    assertEquals(location1, location2);
    assertEquals(3, location1.y);
    assertEquals(2, location1.x);
    assertEquals("java.awt.Point[x=2,y=3]", location1.toString());
    assertEquals("java.awt.Point[x=2,y=3]", location2.toString());
    assertEquals(3.0, location2.getY());
    assertEquals(2.0, location2.getX());
    Point location3 = location2.getLocation();
    assertEquals(point, location3);
    assertEquals(location, location3);
    assertEquals(location1, location3);
    assertEquals(location2, location3);
    assertEquals(2, location2.x);
    assertEquals(3, location2.y);
    assertEquals(2, location3.x);
    assertEquals("java.awt.Point[x=2,y=3]", location3.toString());
    assertEquals(3.0, location3.getY());
    assertEquals(2.0, location3.getX());
    Point location4 = location3.getLocation();
    assertEquals(point, location4);
    assertEquals(location, location4);
    assertEquals(location1, location4);
    assertEquals(location2, location4);
    assertEquals(location3, location4);
    assertEquals(3, location3.y);
    assertEquals(3, location4.y);
    assertEquals(2, location4.x);
    assertEquals("java.awt.Point[x=2,y=3]", location4.toString());
    assertEquals(3.0, location4.getY());
    assertEquals(2.0, location4.getX());
    Point location5 = location4.getLocation();
    assertEquals(point, location5);
    assertEquals(location, location5);
    assertEquals(location1, location5);
    assertEquals(location2, location5);
    assertEquals(location3, location5);
    assertEquals(location4, location5);
    Point location6 = location5.getLocation();
    assertEquals(point, location6);
    assertEquals(location, location6);
    assertEquals(location1, location6);
    assertEquals(location2, location6);
    assertEquals(location3, location6);
    assertEquals(location4, location6);
    assertEquals(location5, location6);
    assertEquals(3, location5.y);
    assertEquals(2.0, location5.getX());
    assertEquals("java.awt.Point[x=2,y=3]", location5.toString());
    assertEquals(2, location5.x);
    assertEquals(3.0, location5.getY());
    assertEquals(2.0, location6.getX());
    Point location7 = location6.getLocation();
    assertEquals(point, location7);
    assertEquals(location, location7);
    assertEquals(location1, location7);
    assertEquals(location2, location7);
    assertEquals(location3, location7);
    assertEquals(location4, location7);
    assertEquals(location5, location7);
    assertEquals(location6, location7);
    assertEquals(2, location6.x);
    assertEquals("java.awt.Point[x=2,y=3]", location6.toString());
    assertEquals(3, location6.y);
    assertEquals(3.0, location6.getY());
    assertEquals(3.0, location7.getY());
    assertEquals(2.0, location7.getX());
    Point location8 = location7.getLocation();
    assertEquals(point, location8);
    assertEquals(location, location8);
    assertEquals(location1, location8);
    assertEquals(location2, location8);
    assertEquals(location3, location8);
    assertEquals(location4, location8);
    assertEquals(location5, location8);
    assertEquals(location6, location8);
    assertEquals(location7, location8);
    assertEquals(3, location7.y);
    assertEquals(2, location7.x);
    assertEquals("java.awt.Point[x=2,y=3]", location7.toString());
    assertEquals(2, location8.x);
    assertEquals(3, location8.y);
    assertEquals(location, point);
    assertEquals(location1, point);
    assertEquals(location2, point);
    assertEquals(location3, point);
    assertEquals(location4, point);
    assertEquals(location5, point);
    assertEquals(location6, point);
    assertEquals(location7, point);
    assertEquals(location8, point);
    Point location9 = point.getLocation();
    assertEquals(point, location9);
    assertEquals(location, location9);
    assertEquals(location1, location9);
    assertEquals(location2, location9);
    assertEquals(location3, location9);
    assertEquals(location4, location9);
    assertEquals(location5, location9);
    assertEquals(location6, location9);
    assertEquals(location7, location9);
    assertEquals(location8, location9);
    assertEquals(3, point.y);
    assertEquals(2.0, point.getX());
    assertEquals("java.awt.Point[x=2,y=3]", point.toString());
    assertEquals(2, point.x);
    assertEquals(3.0, point.getY());
    assertEquals(2.0, location9.getX());
    Point location10 = location9.getLocation();
    assertEquals(point, location10);
    assertEquals(location, location10);
    assertEquals(location1, location10);
    assertEquals(location2, location10);
    assertEquals(location3, location10);
    assertEquals(location4, location10);
    assertEquals(location5, location10);
    assertEquals(location6, location10);
    assertEquals(location7, location10);
    assertEquals(location8, location10);
    assertEquals(location9, location10);
    assertEquals(2, location9.x);
    assertEquals("java.awt.Point[x=2,y=3]", location9.toString());
    assertEquals(3, location9.y);
    assertEquals(3.0, location9.getY());
    assertEquals(3, location10.y);
    Point location11 = location10.getLocation();
    assertEquals(point, location11);
    assertEquals(location, location11);
    assertEquals(location1, location11);
    assertEquals(location2, location11);
    assertEquals(location3, location11);
    assertEquals(location4, location11);
    assertEquals(location5, location11);
    assertEquals(location6, location11);
    assertEquals(location7, location11);
    assertEquals(location8, location11);
    assertEquals(location9, location11);
    assertEquals(location10, location11);
    assertEquals(2, location10.x);
    assertEquals(3, location11.y);
    assertEquals(2, location11.x);
  }
}

